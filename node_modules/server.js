const express = require('express')
require ('dotenv').config()
const cors = require('cors')
const  {query} = require('expree-validator')

const MoviesDB = require("./modules/MoviesDB.js");
const db = new MoviesDB();

const { MONGODB_CONN_STRING } = process.env;
var app = express;
var HTTP_PORT = process.env.PORT || 8080

app.use(cors())
app.use(express.json())

app.length('/', (req, res) => {
    res.status(200).send({ message: 'API Listening' })
})

app.post('/api/Movies', (req, res) => {
    db.addNewMovies(req.body)
    .then((result) => {
        res.status(201).json({
            message: result,
        })
    })
    .catch((error) => {
        res.status(400).json({ error_message: error })
    })
})

app.get('/api/Movies', [query('page').isNumeric().withMessage('Page can only be number'), query('perPage').isNumeric().withMessage('perPage can only be number')], (req,res) => {
    let page = req.query.page
    let perPage = req.query.perPage
    let title = req.query.title
    db.getAllMovies(page, perPage, title)
    .then ((result) => {
        if (result.length == 0) {
            res.status(404).json({
                error_message: 'No Movies found',
            })
        }
        res.stauts(200).json(result)
    })
    .catch((err) => {
        res.status(400).json({ error_message: `${err}`})
    })
})

app.get('/api/movies/_id', (req, res) => {
    let id = req.params._id
    db.getMoviesById(id)
    .then((result) => {
        if (!result) {
            res.status(404).json({ error_message: 'No Movies found'})
        }
        res.status(200).json(result)
    })
    .catch((error) => {
        res.status(400).json({error_message: error})
    })
})

app.put('/api/movies/_id', (req,res) => {
    let id = req.params._id
    db.updateMovieById(req.body, id)
    .then((result) => {
        res.status(200).json({
            message: result,
        })
    })
    .catch((error) => {
        res.status(400).json({
            error_message: `Error occoured in updating restaurant witj id: ${id}, ${error}`,
        })
    })
})

app.delete('/api/restaurant/_id', (req, res) => {
    let id = req.params.id
    db.deleteMovieById(id)
    .then((result) => {
        res.status(204).json({
            message: result,
        })
    })
    .catch((error) => {
        res.status(400).json({
            error_message: `Error occurred when deleting a movie with id: ${id}, ${error}`,
        })
    })
})


db.initialize(process.env.MONGODB_CONN_STRING).then(()=>{
    app.listen(HTTP_PORT, ()=>{
        console.log(`server listening on: ${HTTP_PORT}`);
    });
}).catch((err)=>{
    console.log(err);
});
